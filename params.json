{"name":"posh-git","tagline":"A PowerShell environment for Git","body":"posh-git is a PowerShell module which provides Git/PowerShell integration.\r\n\r\n### Prompt for Git repositories\r\n   The prompt within Git repositories can show the current branch and the state of files (additions, modifications, deletions) within.\r\n   \r\n### Tab completion\r\n   Provides tab completion for common commands when using git.  \r\n   E.g. `git ch<tab>` --> `git checkout`\r\n\r\n### Other goodies\r\n * `ssh-agent` wrappers: `Get-SshAgent`, `Start-Ssh-Agent`, `Stop-SshAgent`\r\n * `Update-AllBranches`\r\n   \r\nUsage\r\n-----\r\n\r\nSee `profile.example.ps1` as to how you can integrate the tab completion and/or git prompt into your own profile.\r\nPrompt formatting, among other things, can be customized using `$GitPromptSettings`, `$GitTabSettings` and `$TortoiseGitSettings`.\r\n\r\nNote on performance: displaying file status in the git prompt for a very large repo can be prohibitively slow. Rather than turn off file status entirely, you can disable it on a repo-by-repo basis by adding individual repository paths to `$GitPromptSettings.RepositoriesInWhichToDisableFileStatus`.\r\n\r\nInstalling\r\n----------\r\n\r\n0. Verify you have PowerShell 2.0 or better with `$PSVersionTable.PSVersion`\r\n\r\n1. Verify execution of scripts is allowed with `Get-ExecutionPolicy` (should be `RemoteSigned` or `Unrestricted`). If scripts are not enabled, run PowerShell as Administrator and call `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm`.\r\n\r\n2. Verify that `git` can be run from PowerShell. If the command is not found, you will need to add a git alias or add `%ProgramFiles%\\Git\\cmd` to your PATH environment variable.\r\n\r\n3. Clone the posh-git repository to your local machine.\r\n\r\n4. From the posh-git repository directory, run `.\\install.ps1`.\r\n\r\n5. Enjoy!\r\n\r\nThe Prompt\r\n----------\r\n\r\nPowerShell generates its prompt by executing a `prompt` function, if one exists. posh-git defines such a function in `profile.example.ps1` that outputs the current working directory followed by an abbreviated `git status`:\r\n\r\n    C:\\Users\\Keith [master]>\r\n\r\nBy default, the status summary has the following format:\r\n\r\n    [{HEAD-name} +A ~B -C !D | +E ~F -G !H]\r\n\r\n* `{HEAD-name}` is the current branch, or the SHA of a detached HEAD\r\n * Cyan means the branch matches its remote\r\n * Green means the branch is ahead of its remote (green light to push)\r\n * Red means the branch is behind its remote\r\n * Yellow means the branch is both ahead of and behind its remote\r\n* ABCD represent the index; EFGH represent the working directory\r\n * `+` = Added files\r\n * `~` = Modified files\r\n * `-` = Removed files\r\n * `!` = Conflicted files\r\n * As in `git status`, index status is dark green and working directory status is dark red\r\n\r\nFor example, a status of `[master +0 ~2 -1 | +1 ~1 -0]` corresponds to the following `git status`:\r\n\r\n    # On branch master\r\n    #\r\n    # Changes to be committed:\r\n    #   (use \"git reset HEAD <file>...\" to unstage)\r\n    #\r\n    #        modified:   this-changed.txt\r\n    #        modified:   this-too.txt\r\n    #        deleted:    gone.ps1\r\n    #\r\n    # Changed but not updated:\r\n    #   (use \"git add <file>...\" to update what will be committed)\r\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n    #\r\n    #        modified:   not-staged.ps1\r\n    #\r\n    # Untracked files:\r\n    #   (use \"git add <file>...\" to include in what will be committed)\r\n    #\r\n    #        new.file\r\n\r\n### Based on work by:\r\n\r\n - Keith Dahlby, http://solutionizing.net/\r\n - Mark Embling, http://www.markembling.info/\r\n - Jeremy Skinner, http://www.jeremyskinner.co.uk/\r\n - Many other contributors - thank you, thank you, thank you!\r\n","google":"UA-39641898-1","note":"Don't delete this file! It's used internally to help with page regeneration."}